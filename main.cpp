#include "mbed.h"

//files for lora comms
#include "ChannelPlans.h"
#include "mDot.h"

//files for heart rate sensor
#include "MAX30102.h"
#include "algorithm.h"

//for accelerometer
#include "MPU6050.h"
#include <cstdint>
#include <string>

//for heart rate sensor
//#define MAX_BRIGHTNESS 255


//lora communications configuration static variables
static std::string network_name = "loralora";
static std::string network_passphrase = "12345678";
static uint8_t network_id[] = { 0x6C, 0x4E, 0xEF, 0x66, 0xF4, 0x79, 0x86, 0xA6 };
static uint8_t network_key[] = { 0x1F, 0x33, 0xA1, 0x70, 0xA5, 0xF1, 0xFD, 0xA0, 0xAB, 0x69, 0x7A, 0xAE, 0x2B, 0x95, 0x91, 0x6B };
static uint8_t frequency_sub_band = 7;
static lora::NetworkType network_type = lora::PUBLIC_LORAWAN;
static uint8_t join_delay = 5;
static uint8_t ack = 0;
static bool adr = true;



static uint32_t aun_ir_buffer[200]; //IR LED sensor data
static int32_t n_ir_buffer_length;    //data length
static uint32_t aun_red_buffer[200];    //Red LED sensor data
int32_t n_sp02; //SPO2 value
int8_t ch_spo2_valid;   //indicator to show if the SP02 calculation is valid
int32_t n_heart_rate;   //heart rate value
int32_t bpm_prev;
int8_t  ch_hr_valid;    //indicator to show if the heart rate calculation is valid
uint8_t uch_dummy;
static uint16_t i;


//state of fall detection
char fall_detected = '0';
uint8_t SOS_flag = 0;
char button_pressed = '0';
uint8_t fall_flag = 0;

//pin defintions
InterruptIn accel_int(GPIO2); //interupt pin for accelerometer
DigitalIn pulse_int(GPIO3); //interuppt (but reallu just used as input) for heart rate sensor
InterruptIn help_button(GPIO1); //interupt pin for if help button is pushed
MPU6050 mpu(I2C_SDA,I2C_SCL);


//functions for help button
void help_button_pressed(){
    button_pressed = '1';
    SOS_flag = 0;
}

//function called on interrupt generated by accelerometer
void fall_detection(){
    fall_detected = '1';
    fall_flag = 0;
}



void init_HR(){
    maxim_max30102_reset(); //resets the MAX30102
    // initialize serial communication at 115200 bits per second:
    
    thread_sleep_for(1);
    i = 0;
    //led = 1;
    
    //read and clear status register
    maxim_max30102_read_reg(0,&uch_dummy);
 
    //VEN = 1;
    maxim_max30102_init();  //initializes the MAX30102
  
    n_ir_buffer_length=200; //buffer length of 100 stores 5 seconds of samples running at 100sps
    for(i = 0; i < 200; i++){
        while(pulse_int.read()==1);
        maxim_max30102_read_fifo((aun_red_buffer+i), (aun_ir_buffer+i));
    }
        //calculate heart rate and SpO2 after first 500 samples (first 5 seconds of samples)
    maxim_heart_rate_and_oxygen_saturation(aun_ir_buffer, n_ir_buffer_length, aun_red_buffer, &n_sp02, &ch_spo2_valid, &n_heart_rate, &ch_hr_valid); 
    bpm_prev = n_heart_rate;

}

//function to call in loop for heart rate
void get_HR(){    
    i=0;
    //un_min=0x3FFFF;
    //un_max=0;
    for(i = 0; i < 200; i++){
        while(pulse_int.read()==1);
        maxim_max30102_read_fifo((aun_red_buffer+i), (aun_ir_buffer+i));
    }
    bpm_prev = n_heart_rate;
    maxim_heart_rate_and_oxygen_saturation(aun_ir_buffer, n_ir_buffer_length, aun_red_buffer, &n_sp02, &ch_spo2_valid, &n_heart_rate, &ch_hr_valid); 
}



// main() runs in its own thread in the OS
int main()
{

    //lora comms set up
    lora::ChannelPlan* plan = new lora::ChannelPlan_US915;
    assert(plan);
    mDot* dot = mDot::getInstance(plan);
    assert(dot);
    dot->setAdr(adr);
    dot->setJoinDelay(join_delay);
    dot->joinNetwork(); 



    //help button
    help_button.mode(PullUp);
    help_button.fall(&help_button_pressed);

    //acceleromter
    accel_int.rise(&fall_detection);
    mpu.reset();
    if(mpu.testConnection()){
        mpu.motion_interrupt();
    }
    init_HR();
    while (true) {
        std::vector<uint8_t> tx_data;
        if(!dot->getNetworkJoinStatus()){
            dot->joinNetwork();  
        }

        //update pulse readings
        get_HR();
        printf("bpm: %i SP02: %i\n", n_heart_rate, n_sp02);
        int32_t avg_bpm = (n_heart_rate + bpm_prev)/2;
        std::string blah = to_string(avg_bpm);
        for (char ch : blah) {
            tx_data.push_back(static_cast<uint8_t>(ch));
        }
        tx_data.push_back(',');
        blah = to_string(n_sp02);
        for (char ch : blah) {
            tx_data.push_back(static_cast<uint8_t>(ch));
        }
        tx_data.push_back(',');
        tx_data.push_back(fall_detected);
        tx_data.push_back(',');
        tx_data.push_back(button_pressed);
        if(fall_detected == '1'){
            printf("FALL DETECTED!\n");
            fall_flag++;
            if(fall_flag > 7){
                fall_detected = '0';
                mpu.read(0x3A); //clears interuppt
            }
        }
        if(button_pressed == '1'){
            SOS_flag++;
            printf("SOS!\n");
            if(SOS_flag > 10){
                button_pressed = '0';
            }
        }
        dot->send(tx_data);
        thread_sleep_for(10);
    }
}

